package org.komparator.mediator.ws.cli;

import static javax.xml.ws.BindingProvider.ENDPOINT_ADDRESS_PROPERTY;

import java.io.IOException;
import java.net.ConnectException;
import java.net.SocketTimeoutException;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Base64;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.Properties;

import javax.xml.ws.BindingProvider;
import javax.xml.ws.WebServiceException;

import pt.ulisboa.tecnico.sdis.ws.uddi.UDDINaming;


import org.komparator.mediator.ws.*;
import org.komparator.security.handler.NonceHandler;

import com.sun.xml.ws.client.ClientTransportException;


/**
 * Client.
 *
 * Adds easier endpoint address configuration and 
 * UDDI lookup capability to the PortType generated by wsimport.
 */
public class FrontEnd implements MediatorPortType{

	
	Map<String, Object> requestContext;
	
	MediatorService service = null;

    /** WS port (port type is the interface, port is the implementation) */
    MediatorPortType port = null;
    
    MediatorClient mediatorclient = null;
    
    /** UDDI server URL */
    private String uddiURL = null;

    /** WS name */
    private String wsName = null;

    /** WS endpoint address */
    private String wsURL = null; // default value is defined inside WSDL

    public String getWsURL() {
        return wsURL;
    }

    /** output option **/
    private boolean verbose = false;

    public boolean isVerbose() {
        return verbose;
    }

    public void setVerbose(boolean verbose) {
        this.verbose = verbose;
    }
	
    /** constructor with provided web service URL */
    public FrontEnd(MediatorClient mediatorClient,	Map<String, Object> requestContext) throws MediatorClientException {
    	this.mediatorclient= mediatorClient;
        this.requestContext = requestContext;
        this.port = mediatorclient.getPort();
        setTimeout();
    }

    /** UDDI lookup */
    private void uddiLookup() throws MediatorClientException {
    	Properties props;
		props = new Properties();
		try {
			props.load(this.getClass().getResourceAsStream("/main.properties"));
			System.out.println("Loaded properties:");
			System.out.println(props);
		} catch (IOException e) {
			final String msg = String.format("Could not load properties file {}", "/test.properties");
			System.out.println(msg);
			try {
				throw e;
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		}

		 uddiURL = props.getProperty("uddi.url");
		 wsName = props.getProperty("ws.name");
		 wsURL = props.getProperty("ws.url");
    	
    	
    	try {
                System.out.printf("Contacting UDDI at %s%n", uddiURL);
            UDDINaming uddiNaming = new UDDINaming(uddiURL);

                System.out.printf("Looking for '%s'%n", wsName);
            wsURL = uddiNaming.lookup(wsName);

        } catch (Exception e) {
            String msg = String.format("Client failed lookup on UDDI at %s!",
                    uddiURL);
            throw new MediatorClientException(msg, e);
        }

        if (wsURL == null) {
            String msg = String.format(
                    "Service with name %s not found on UDDI at %s", wsName,
                    uddiURL);
            throw new MediatorClientException(msg);
        }
    }
    
    private void createStub() {
        if (verbose)
            System.out.println("Creating stub ...");

        service = new MediatorService();
        port = service.getMediatorPort();

        if (wsURL != null) {
            if (verbose)
                System.out.println("Setting endpoint address ...");
            BindingProvider bindingProvider = (BindingProvider) port;
            Map<String, Object> requestContext = bindingProvider
                    .getRequestContext();
            requestContext.put(ENDPOINT_ADDRESS_PROPERTY, wsURL);
        }
    }

    
    public void setTimeout() {
    	 
    	int connectionTimeout = 10000;
        // The connection timeout property has different names in different versions of JAX-WS
        // Set them all to avoid compatibility issues
        final List<String> CONN_TIME_PROPS = new ArrayList<String>();
        CONN_TIME_PROPS.add("com.sun.xml.ws.connect.timeout");
        CONN_TIME_PROPS.add("com.sun.xml.internal.ws.connect.timeout");
        CONN_TIME_PROPS.add("javax.xml.ws.client.connectionTimeout");
        // Set timeout until a connection is established (unit is milliseconds; 0 means infinite)
        for (String propName : CONN_TIME_PROPS)
            requestContext.put(propName, connectionTimeout);
        System.out.printf("Set connection timeout to %d milliseconds%n", connectionTimeout);

        int receiveTimeout = 10000;
        // The receive timeout property has alternative names
        // Again, set them all to avoid compability issues
        final List<String> RECV_TIME_PROPS = new ArrayList<String>();
        RECV_TIME_PROPS.add("com.sun.xml.ws.request.timeout");
        RECV_TIME_PROPS.add("com.sun.xml.internal.ws.request.timeout");
        RECV_TIME_PROPS.add("javax.xml.ws.client.receiveTimeout");
        // Set timeout until the response is received (unit is milliseconds; 0 means infinite)
        for (String propName : RECV_TIME_PROPS)
            requestContext.put(propName, receiveTimeout);
        System.out.printf("Set receive timeout to %d milliseconds%n", receiveTimeout);
    }
    
    @Override
	public void clear() {
    	try{
    	port.clear();
    	}catch(WebServiceException wse) {
            System.out.println("Caught: " + wse);
            Throwable cause = wse.getCause();
            if (cause != null && (cause instanceof SocketTimeoutException || cause instanceof ConnectException)) {
                System.out.println("The cause was a timeout exception: " + cause);
                try{
       			 Thread.sleep(7500); 
       		 }catch(InterruptedException e){
       				System.out.println("Sleeping");
       		 }
                try {
					uddiLookup();
					createStub();

                } catch (MediatorClientException e) {
		            System.out.println("Caught exception in uddiLookup: " + e);
				} 
            }
    	}
	}

	@Override
	public List<CartView> listCarts() {
		List<CartView> list;
		try{
			list = port.listCarts();
	    	}catch(WebServiceException wse) {
	            System.out.println("Caught: " + wse);
	            Throwable cause = wse.getCause();
	            if (cause != null && (cause instanceof SocketTimeoutException || cause instanceof ConnectException)) {
	                System.out.println("The cause was a timeout exception: " + cause);
	                try{
	       			 Thread.sleep(7500); 
	       		 }catch(InterruptedException e){
	       				System.out.println("Sleeping");
	       		 }
						try {
							uddiLookup();
							createStub();
						} catch (MediatorClientException e) {
				            System.out.println("Caught exception in uddiLookup: " + e);
						}
	            }
	    		list= port.listCarts();
	    	}
		return list;
	} 

	@Override
	public List<ItemView> searchItems(String descText) throws InvalidText_Exception {
		List<ItemView> list;
		try{
			list = port.searchItems(descText);
	    	}catch(WebServiceException wse) {
	            System.out.println("Caught: " + wse);
	            Throwable cause = wse.getCause();
	            if (cause != null && (cause instanceof SocketTimeoutException || cause instanceof ConnectException)) {
	                System.out.println("The cause was a timeout exception: " + cause);
	                try{
	       			 Thread.sleep(7500); 
	       		 }catch(InterruptedException e){
	       				System.out.println("Sleeping");
	       		 }
						try {
							uddiLookup();
							createStub();
						} catch (MediatorClientException e) {
				            System.out.println("Caught exception in uddiLookup: " + e);
						}
	            }
	    		list= port.searchItems(descText);
	    	}
		return list;
	}

	@Override
	public ShoppingResultView buyCart(String cartId, String creditCardNr) throws EmptyCart_Exception, InvalidCartId_Exception, InvalidCreditCard_Exception {
		ShoppingResultView result = null;
		try{
			SecureRandom random = SecureRandom.getInstance("SHA1PRNG");
			System.out.println("Generating random byte array ...");
			final byte array[] = new byte[32]; random.nextBytes(array);
		
			String shopUpdateNonce = Base64.getEncoder().encodeToString(array);
			requestContext.put(NonceHandler.SHOP_UPDATED_NONCE, shopUpdateNonce); 
			
			result = port.buyCart(cartId, creditCardNr);
	    } catch(WebServiceException wse) {
	            System.out.println("Caught: " + wse);
	            Throwable cause = wse.getCause();
	            if (cause != null && (cause instanceof SocketTimeoutException || cause instanceof ConnectException)) {
	                System.out.println("The cause was a timeout exception: " + cause);
	                try{
	       			 Thread.sleep(10000); 
	       		 }catch(InterruptedException e){
	       				System.out.println("Sleeping");
	       		 }
						try {
							uddiLookup();
							createStub();
						} catch (MediatorClientException e) {
				            System.out.println("Caught exception in uddiLookup: " + e);
						}
	            }
	            try {
	            	SecureRandom random = SecureRandom.getInstance("SHA1PRNG");
					System.out.println("Generating random byte array ...");
					final byte array[] = new byte[32]; random.nextBytes(array);
			
					String shopUpdateNonce = Base64.getEncoder().encodeToString(array);
					requestContext.put(NonceHandler.SHOP_UPDATED_NONCE, shopUpdateNonce); 
					
					result = port.buyCart(cartId, creditCardNr);
	            } catch (NoSuchAlgorithmException e) {
	            	e.printStackTrace();
	            }
	    		
	    } catch (NoSuchAlgorithmException e) {
			e.printStackTrace();
	    }
		return result;
	}

	@Override
	public void addToCart(String cartId, ItemIdView itemId, int itemQty) throws InvalidCartId_Exception,
			InvalidItemId_Exception, InvalidQuantity_Exception, NotEnoughItems_Exception {
		 try{ 
				 SecureRandom random = SecureRandom.getInstance("SHA1PRNG");
				 System.out.println("Generating random byte array ...");
				 final byte array[] = new byte[32]; random.nextBytes(array);
		
		
				 String cartUpdateNonce = Base64.getEncoder().encodeToString(array);
				 // String cartUpdateNonce = "khjasdasdhajdnasd";
				 requestContext.put(NonceHandler.CART_UPDATED_NONCE, cartUpdateNonce); 
				 port.addToCart(cartId, itemId, itemQty);
			}catch(WebServiceException wse) {
    
				System.out.println("Caught: " + wse);
		            Throwable cause = wse.getCause();
		            if (cause != null && (cause instanceof SocketTimeoutException || cause instanceof ConnectException)) {
		                System.out.println("The cause was a timeout exception: " + cause);
		                try{
		       			 Thread.sleep(7500); 
		       			 
							
		       			 SecureRandom random = SecureRandom.getInstance("SHA1PRNG");
						System.out.println("Generating random byte array ...");
								final byte array[] = new byte[32]; random.nextBytes(array);
								System.out.println("");
								System.out.println("");
								System.out.println("");
								
								System.out.println("");
								System.out.println("");
								System.out.println("");
								System.out.println("");
						
						
								 String cartUpdateNonce = Base64.getEncoder().encodeToString(array);
								 System.out.println(cartUpdateNonce);
								 // String cartUpdateNonce = "khjasdasdhajdnasd";
								 requestContext.put(NonceHandler.CART_UPDATED_NONCE, cartUpdateNonce);  
								 port.addToCart(cartId, itemId, itemQty);
						

		                }catch(InterruptedException e){
		       				System.out.println("Sleeping");
		                } catch (NoSuchAlgorithmException e) {
							e.printStackTrace();
						}		
		                try {
							uddiLookup();
							createStub();
					        System.out.println("ENTROU NO UDDILOOKUP " );
	
						} catch (MediatorClientException e) {
					            System.out.println("Caught exception in uddiLookup: " + e);
						}
		           }


					 
		    	}catch (NoSuchAlgorithmException e) { 
		    		e.printStackTrace(); 
		    	}
		
	}

	@Override
	public String ping(String name) {
		String s;
		try{
			s = port.ping(name);
	    	}catch(WebServiceException wse) {
	            System.out.println("Caught: " + wse);
	            Throwable cause = wse.getCause();
	            if (cause != null && (cause instanceof SocketTimeoutException || cause instanceof ConnectException)) {
	                System.out.println("The cause was a timeout exception: " + cause);
	                try{
	       			 Thread.sleep(7500); 
	       		 }catch(InterruptedException e){
	       				System.out.println("Sleeping");
	       		 }
						try {
							uddiLookup();
							createStub();
						} catch (MediatorClientException e) {
				            System.out.println("Caught exception in uddiLookup: " + e);
						}
	            }
	    		s = port.ping(name);
	    	}
		return s;	
		}

	@Override
	public List<ShoppingResultView> shopHistory() {
		List<ShoppingResultView> list;
		try{
			list = port.shopHistory();
	    	}catch(WebServiceException wse) {
	            System.out.println("Caught: " + wse);
	            Throwable cause = wse.getCause();
	            if (cause != null && (cause instanceof SocketTimeoutException || cause instanceof ConnectException)) {
	                System.out.println("The cause was a timeout exception: " + cause);
	                try{
	       			 Thread.sleep(7500); 
	       		 }catch(InterruptedException e){
	       				System.out.println("Sleeping");
	       		 }
						try {
							uddiLookup();
							createStub();
						} catch (MediatorClientException e) {
				            System.out.println("Caught exception in uddiLookup: " + e);
						}
	            }
	    		list= port.shopHistory();
	    	}
		return list;
	}


	@Override
	public List<ItemView> getItems(String productId) throws InvalidItemId_Exception {
		List<ItemView> list;
		try{
			list = port.getItems(productId);
	    	}catch(WebServiceException wse) {
	            System.out.println("Caught: " + wse);
	            Throwable cause = wse.getCause();
	            if (cause != null && (cause instanceof SocketTimeoutException || cause instanceof ConnectException)) {
	                System.out.println("The cause was a timeout exception: " + cause);
	                try{
	       			 Thread.sleep(7500); 
	       		 }catch(InterruptedException e){
	       				System.out.println("Sleeping");
	       		 }
						try {
							uddiLookup();
							createStub();
						} catch (MediatorClientException e) {
				            System.out.println("Caught exception in uddiLookup: " + e);
						}
	            }
	    		list= port.getItems(productId);
	    	}
		return list;
	}
	
	//never used
	@Override
	public void imAlive() {
		port.imAlive();
	}
	
	//never used
	@Override
	public void updateShopHistory(List<ShoppingResultView> shopResults, String nonce) {
		try{
			port.updateShopHistory(shopResults, nonce);
	    	}catch(WebServiceException wse) {
	            System.out.println("Caught: " + wse);
	            Throwable cause = wse.getCause();
	            if (cause != null && (cause instanceof SocketTimeoutException || cause instanceof ConnectException)) {
	                System.out.println("The cause was a timeout exception: " + cause);
	                try{
	       			 Thread.sleep(7500); 
	       		 }catch(InterruptedException e){
	       				System.out.println("Sleeping");
	       		 }
						try {
							uddiLookup();
						} catch (MediatorClientException e) {
				            System.out.println("Caught exception in uddiLookup: " + e);
						}
	            }
	    		port.updateShopHistory(shopResults, nonce);

	    	}		
	}
	
	//never used
	@Override
	public void updateCart(List<CartView> updatedCarts, String nonce) {
		try{
			port.updateCart(updatedCarts, nonce);
	    	}catch(WebServiceException wse) {
	            System.out.println("Caught: " + wse);
	            Throwable cause = wse.getCause();
	            if (cause != null && (cause instanceof SocketTimeoutException || cause instanceof ConnectException)) {
	                System.out.println("The cause was a timeout exception: " + cause);
	                try{
	       			 Thread.sleep(7500); 
	       		 }catch(InterruptedException e){
	       				System.out.println("Sleeping");
	       		 }
						try {
							uddiLookup();
						} catch (MediatorClientException e) {
				            System.out.println("Caught exception in uddiLookup: " + e);
						}
	            }
	    		port.updateCart(updatedCarts, nonce);

	    	}		
}
}